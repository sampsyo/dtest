#!/usr/bin/env python

import sys
import struct


def unpack_advance(fmt, buffer, offset):
    """Unpack a string from a buffer. Return the unpacked values and the
    new offset.
    """
    res = struct.unpack_from(fmt, buffer, offset)
    return res, offset + struct.calcsize(fmt)


def parse_packed_floats(buffer):
    """Parse the data format generated by `distgen` for this
    application.
    """
    offset = 0
    rows = []
    while offset < len(buffer):
        (length,), offset = unpack_advance('i', buffer, offset)
        row, offset = unpack_advance('%sf' % length, buffer, offset)
        rows.append(row)
    return rows


def test_vectors(vecs, kind, dims, args):
    if kind == 'uniform':
        min, max = args
        print(vecs, min, max)

    else:
        raise Exception('unknown distribution kind {}'.format(kind))


def disttest(infile, args):
    rows = parse_packed_floats(infile.read())
    test_vectors(rows, args[0], int(args[1]), map(float, args[2:]))


if __name__ == '__main__':
    disttest(sys.stdin, sys.argv[1:])
