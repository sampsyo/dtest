#!/usr/bin/env python

import sys
import struct
from scipy.stats import ks_2samp
from distgen import rowgen


def unpack_advance(fmt, buffer, offset):
    """Unpack a string from a buffer. Return the unpacked values and the
    new offset.
    """
    res = struct.unpack_from(fmt, buffer, offset)
    return res, offset + struct.calcsize(fmt)


def parse_packed_floats(buffer):
    """Parse the data format generated by `distgen` for this
    application.
    """
    offset = 0
    rows = []
    while offset < len(buffer):
        (length,), offset = unpack_advance('i', buffer, offset)
        row, offset = unpack_advance('%sf' % length, buffer, offset)
        rows.append(row)
    return rows


def test_vectors(vecs, kind, dims, args):
    # Generate data from the appropriate distribution.
    synthetic = []
    for i in range(len(vecs)):
        synthetic.append(rowgen(kind, dims, args))

    # Test for similarity.
    _, p = ks_2samp(synthetic, vecs)
    return p


def disttest(infile, args):
    rows = parse_packed_floats(infile.read())
    score = test_vectors(rows, args[0], int(args[1]), map(float, args[2:]))
    print(score)


if __name__ == '__main__':
    disttest(sys.stdin, sys.argv[1:])
